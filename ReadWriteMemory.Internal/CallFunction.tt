<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>

#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment (but other parameters do)
//<auto-generated>

using ReadWriteMemory.Shared.Entities;

namespace ReadWriteMemory.Internal;

public partial class RwMemory
{
    /// <summary>
    /// Calls a function inside the process. You just have to know the signature of the function.
    /// </summary>
    /// <param name="memoryAddress"></param>
    public unsafe void CallFunction(MemoryAddress memoryAddress)
    {
        var targetAddress = GetTargetAddress(memoryAddress);

        var func = (delegate* unmanaged<void>)targetAddress;

        func();
    }
<#
    foreach (var cc in new[] { "Cdecl", "Stdcall", "Fastcall", "Thiscall" })
    {
        for (var i = 1; i <= 10; i++)
        {
#>

    /// <summary>
    /// <inheritdoc cref="CallFunction"/>
    /// </summary>
    /// <param name="memoryAddress"></param>
    public unsafe void CallFunction<#= cc #><<#=
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"TArg{x}")) #>>(MemoryAddress memoryAddress, <#=
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"TArg{x} arg{x}")) #>)
    {
        var targetAddress = GetTargetAddress(memoryAddress);

        var func = (delegate* unmanaged[<#= cc #>]<<#=
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"TArg{x}")) #>, void>)targetAddress;

        func(<#=
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"arg{x}")) #>);
    }
<#
        }
    }
#>
<#
    foreach (var cc in new[] { "Cdecl", "Stdcall", "Fastcall", "Thiscall" })
    {
        for (var i = 1; i <= 10; i++)
        {
#>

    /// <summary>
    /// <inheritdoc cref="CallFunction"/>
    /// </summary>
    /// <param name="memoryAddress"></param>
    public unsafe TResult CallFunction<#= cc #><<#= "TResult, " +
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"TArg{x}")) #>>(MemoryAddress memoryAddress, <#=
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"TArg{x} arg{x}")) #>)
    {
        var targetAddress = GetTargetAddress(memoryAddress);

        var func = (delegate* unmanaged[<#= cc #>]<<#=
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"TArg{x}")) #>, TResult>)targetAddress;

        return func(<#=
                string.Join(", ", Enumerable.Range(1, i).Select(x => $"arg{x}")) #>);
    }
<#
        }
    }
#>
}