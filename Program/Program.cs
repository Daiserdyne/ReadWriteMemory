using ReadWriteMemory;
using ReadWriteMemory.Models;

namespace Program;

internal class Program
{
    private static Memory _mem = new("Outlast2");

    private static MemoryAddress _movementXAddress = new(0x56C55F, "Outlast2.exe");
    private static MemoryAddress _movementYAddress = new(0x56C568, "Outlast2.exe");
    private static byte[] _movementX = { 0x81, 0xBB, 0xE0, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x17, 0x90, 0x90, 0x90, 0x90, 0xF3, 0x0F, 0x58, 0x7B, 0x04, 0xEB, 0x15, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xF3, 0x0F, 0x11, 0x33, 0xF3, 0x0F, 0x58, 0x7B, 0x04 };
    private static byte[] _movementY = { 0x81, 0xBB, 0xE0, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x12, 0x90, 0x90, 0x90, 0x90, 0xEB, 0x11, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xF3, 0x0F, 0x11, 0x7B, 0x04 };

    public Program()
    {
        _mem.Logger.OnLogging += Logger_OnLogging;
    }

    private static UIntPtr _caveAddress = UIntPtr.Zero;

    protected internal static void Main()
    {
        _mem.GetBaseAddress(new(0x219FF58, "Outlast2.exe", new[] { 0xc38, 0x7f58 }));

        _caveAddress = _mem.CreateCodeCave(_movementXAddress, _movementX, 9);
        _caveAddress = _mem.CreateCodeCave(_movementYAddress, _movementY, 5);

        _mem.CloseCodeCave(_movementXAddress);
        _mem.CloseCodeCave(_movementYAddress);

        _mem.Dispose();

        Console.ReadLine();
    }

    private static void Logger_OnLogging(string caption, string message)
    {
        Console.WriteLine(message);
    }
}